//Add_user Backup
<?php
namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Models\API\Company_admin;
use App\Models\API\Company_Admins;
use App\Models\API\Company_user;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

class AddUserController extends Controller
{
        public function add_user(Request $request) //done
        {
            $token = $request->bearerToken();
            //$token= $token_data->token;
            $secretKey ='345fgvvc4';
            $decryptedInput = decrypt($token, $secretKey);
            $token_data=list($id, $user, $admin_name, $companyname) = explode('|', $decryptedInput);
            
            $company_id=$token_data['0'];



            $latest_employee_id = Company_Admins::latest('_id')->value('_id');
            $company_id=intval($id);//fetch company_id
            $company_admins=Company_Admins::where('_id',$company_id)->value('total_employee'); //fetch total employee from company_admin
            $total=Company_user::where('company_id',$company_id)->count();//user count that particular id
            $company_admins = Company_Admins::where('_id', $company_id)->first();  //get latest record from company_admin
           if ($company_admins) {
                $allowed_total_employee = $company_admins->total_employee;
        
              $latest_total_employee = Company_Admins::latest('_id')->value('total_employee');
                // Check if the current number of employees is less than the allowed total employees
              
                if ($total < $allowed_total_employee) {
                    // Continue with user creation


                    
                    $validatedData = $request->validate([
                        'user_email' => 'required',
                        'user_name'=>'required',
                        'user_password'=>'required',
                        'user_type'=>'required',
                        'user_add_date'=>'required',
                    
                ]);
                // $password = Hash::make($validatedData['user_password']);
                $password = hash('sha1',$request->password);
                $new_id = Company_user::max('_id') + 1;
                $data = [
                    '_id' => $new_id,
                    'company_id'=>$company_id,
                    'counter'=>$latest_total_employee,
                    'user_email' => $validatedData['user_email'],
                    'user_name' => $validatedData['user_name'],
                    'user_password' =>$password,
                    'user_type' => $validatedData['user_type'],
                    'user_add_date' => $validatedData['user_add_date'],
                    'otp' => 0,
                    'otpexperience' => '',
                    'last_change_password' => '',
                    'last_login' => '',
                    'entry_time' => '',
                    'user_status' => '',
                    'shift_id' => '',
                    'employee' => '',
                    'payroll' => '',
                    'attendance' => '',
                    'break' => '',
                    'leave' => '',
                    'letter' => '',
                    'administration' => '',
                    'recruitment' => '',
                    'ip' => '',
                    'browser' => '',
                    'city' => '',
                    'state' => '',
                    'os' => '',
                    'delete_status'=>1,
                    'created_at' =>'',
                    'updated_at' =>'',
                ];
    
        
                $result = Company_user::insert($data);
        
                    if ($result) {
                        return response()->json(['message' => 'User added successfully'], 201);
                    } else {
                        return response()->json(['message' => 'Failed to Add User'], 500);
                    }
                } else {
                    return response()->json(['message' => 'Maximum number of employees reached for this company'], 400);
                }
            } else {
                return response()->json(['message' => 'Company not found'], 404);
            }
 }
 
public function update_user(Request $request) //done
{

    $token = $request->bearerToken();
    //$token= $token_data->token;
    $secretKey ='345fgvvc4';
    $decryptedInput = decrypt($token, $secretKey);
    $token_data=list($id, $user, $admin_name, $companyname) = explode('|', $decryptedInput);
    $company_id=$token_data['0'];
    $new_id=intval($id);

    $reqid=intval($request->_id);
    // dd($reqid);
    $existingUserData =Company_user::where('_id',$reqid)->first();
    // $existingUserData =Company_user::where('company_id',$new_id)->get();
    // dd($existingUserData);
    if (!$existingUserData) {
        return response()->json(['message' => 'User not found'], 404);
    }
    $validatedData = $request->validate([
        'user_email' => 'required',
        'user_name' => 'required',
        'user_password' => 'required',
        'user_type' => 'required',
        'user_add_date' => 'required',
    ]);

    $password = hash('sha1', $request->user_password);
    $data = [
        'user_email' => $request['user_email'],
        'user_name' => $request['user_name'],
        'user_password' => $password,
        'user_type' => $request['user_type'],
        'user_add_date' => $request['user_add_date'],
        'otp' => 0,
        'otpexperience' => '',
        'last_change_password' => '',
        'last_login' => '',
        'entry_time' => '',
        'user_status' => '',
        'shift_id' => '',
        'employee' => '',
        'payroll' => '',
        'attendance' => '',
        'break' => '',
        'leave' => '',
        'letter' => '',
        'administration' => '',
        'recruitment' => '',
        'ip' => '',
        'browser' => '',
        'city' => '',
        'state' => '',
        'os' => '',
        'delete_status'=>1,
        'created_at' =>'',
        'updated_at' =>'',
    ];
    $result = $existingUserData->update($data);
        if ($result) {
        return response()->json(['message' => 'User updated successfully'], 200);
    } else {
        return response()->json(['message' => 'Failed to update user'], 500);
    }
   
}
public function delete_user(Request $request,$id) //done
{
    $token = $request->bearerToken();
    //$token= $token_data->token;
    $secretKey ='345fgvvc4';
    $decryptedInput = decrypt($token, $secretKey);
    $token_data=list($id, $user, $admin_name, $companyname) = explode('|', $decryptedInput);
    
    $company_id=$token_data['0'];
    $new_id=intval($id);
    $data = Company_user::where('_id',$new_id)->first();
    $data->delete_status ='0';
    $data->save();
    return response()->json(['status' => 'Deleted Successfully']);
}
public function index_user(Request $request)
{
    $token = $request->bearerToken();
    //$token= $token_data->token;
    $secretKey ='345fgvvc4';
    $decryptedInput = decrypt($token, $secretKey);
    $token_data=list($id, $user, $admin_name, $companyname) = explode('|', $decryptedInput);
    $company_id=$token_data['0'];
    $company_id=intval($id);
    // $rec=Company_Admins::all();
    $records=Company_user::where('delete_status', 1)->get();
    // $records=Company_user::where('delete_status', "1")->paginate(2);
    //dd($rec);
    // $records = Company_user::where('company_id',$company_id)->where('delete_status', 1)->get();
    return response()->json(['success' => true,'data' => $records], 200);
}
public function searchuser($name) //search
{
    $results=Company_user::where('user_name','like','%'.$name.'%')->get();
    // dd($results);
     if($results->isEmpty()) {
        return response()->json(['message' => 'No results found'], 404);
    } else {
        
        return response()->json(['results' => $results], 200);
    }
}


}

*************************

<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\API\CompanyAdminsController;
use App\Http\Controllers\API\AddUserController;
use App\Http\Controllers\API\HolidayController;
use App\Http\Controllers\API\DepartmentController;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "api" middleware group. Make something great!
|
*/

Route::group(['middleware' => 'tokenauth'], function () {
    // AddUserController
    Route::post('add_user','App\Http\Controllers\API\AddUserController@add_user');
    Route::post('update_user','App\Http\Controllers\API\AddUserController@update_user');
    Route::get('index_user','App\Http\Controllers\API\AddUserController@index_user');
    Route::get('delete_user/{id}','App\Http\Controllers\API\AddUserController@delete_user');
    Route::get('search_user/{name}',[AddUserController::class,'searchuser']);

    // HolidayController
    Route::post('add_holiday','App\Http\Controllers\API\HolidayController@add_holiday');
    Route::post('update_holiday','App\Http\Controllers\API\HolidayController@update_holiday');
    Route::get('index_holiday','App\Http\Controllers\API\HolidayController@index_holiday');
    Route::get('delete_holiday/{id}','App\Http\Controllers\API\HolidayController@delete_holiday');
    Route::get('search_holiday/{name}',[HolidayController::class,'searchholiday']);

    //DepartmentController
    Route::post('add_department','App\Http\Controllers\API\DepartmentController@add_department');
    Route::post('update_department','App\Http\Controllers\API\DepartmentController@update_department');
    Route::get('index_department','App\Http\Controllers\API\DepartmentController@index_department');
    Route::get('delete_department/{id}','App\Http\Controllers\API\DepartmentController@delete_department');
    Route::get('search_department/{name}',[DepartmentController::class,'searchdepartment']);
});




Route::post('company_register', 'App\Http\Controllers\API\CompanyAdminsController@store');
Route::post('company_login', 'App\Http\Controllers\API\CompanyAdminsController@company_login');
// Route::post('company_dashboard', 'App\Http\Controllers\API\CompanyAdminsController@company_dashboard');
Route::get('/verify/email-auth/{email}', [CompanyAdminsController::class,'sendVerificationEmail'])->name('verify_email.auth');
Route::post('company_login', 'App\Http\Controllers\API\CompanyAdminsController@company_login');

// priti
Route::post('add_user',[AddUserController::class,'add_user']);

// pagination

*************************
<?php

namespace App\Models\API;
use MongoDB\Laravel\Eloquent\Model;
use Laravel\Sanctum\HasApiTokens;
// use Illuminate\Database\Eloquent\Factories\HasFactory;
// use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class Company_user extends Model
{
    // use HasFactory;
    use HasApiTokens;
    protected $connection = 'mongodb';
    protected $collection = 'company_user';
    protected $primaryKey = '_id';
    protected $fillable = [
        '_token', 
        'user_email',
        'user_name', 
        'user_password',
        'user_type',
        'user_add_date',
        'delete_status',
    ];
    public function companyAdmin()
    {
        return $this->belongsTo(Company_admin::class,'_id'); // Assuming there is a field 'admin_id' in the 'company_user' collection referencing '_id' in 'company_admin' collection
    }

    public function up()
    {
        Schema::create('company_user', function (Blueprint $collection) {
            $collection->string('company_id');
            $collection->string('counter');
            $collection->string('user_email')->unique();
            $collection->string('user_name');
            $collection->string('user_password');
            $collection->string('user_type');
            $collection->date('user_add_date');
            $collection->integer('delete_status');
            $collection->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('company_user');
    }
}
**********************
Bearer eyJpdiI6Ikl4SGtiVzZ4VUpKdUwxUGovaUFtYmc9PSIsInZhbHVlIjoibDdvYU83cEFSN0VOT042Q3FkaUd6cGpPT2J3cUhBdHFXODVPYXBGNCtYST0iLCJtYWMiOiI2NTdmOTRjNjAyMDEwNDU4OGNlYjVmOWQyNTI0ODdmZDY1NTQxNTYxMGFmZmQ5NDdlOTEzZGRkNTc2OTIwMWM2IiwidGFnIjoiIn0=

current token in local

Bearer eyJpdiI6Ikl4SGtiVzZ4VUpKdUwxUGovaUFtYmc9PSIsInZhbHVlIjoibDdvYU83cEFSN0VOT042Q3FkaUd6cGpPT2J3cUhBdHFXODVPYXBGNCtYST0iLCJtYWMiOiI2NTdmOTRjNjAyMDEwNDU4OGNlYjVmOWQyNTI0ODdmZDY1NTQxNTYxMGFmZmQ5NDdlOTEzZGRkNTc2OTIwMWM2IiwidGFnIjoiIn0=


**************
neha mam
uRL:https://nbphr.veravalonline.com/API/public/api/company_login
method :POST
email==>neha@veravalonline.com

password==>123456
type==>company_admin
 "token": "eyJpdiI6IllaSVpWaTROYU9wWFV1ZHUrZDd6Q3c9PSIsInZhbHVlIjoiUmtIMTJ5YjdmTElrVWcweTVYa1Q0MW1YMUg2YVdoMXcrNkk5L1oxbU1KOD0iLCJtYWMiOiJiMTRmODEwN2NlOTMxY2E3ZmM0NzNkNzAwN2YwYTBlNDhlYTI0NjJmODdmZjM4MTA4MDgxNzMzZWFiNWE2MjVjIiwidGFnIjoiIn0="

******************************
api.php
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\API\CompanyAdminsController;
use App\Http\Controllers\API\AddUserController;
<<<<<<< HEAD
use App\Http\Controllers\API\HolidayController;
use App\Http\Controllers\API\DepartmentController;
=======
use App\Http\Controllers\API\DataTableController;
use App\Http\Controllers\API\CompanyAnnouncementController;

>>>>>>> 3e0c595e496f7e81c636ef66f688a0007738d35d

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "api" middleware group. Make something great!
|
*/

Route::group(['middleware' => 'tokenauth'], function () {
<<<<<<< HEAD

   // AddUserController
=======
    // AddUserController
>>>>>>> 3e0c595e496f7e81c636ef66f688a0007738d35d
    Route::post('add_user','App\Http\Controllers\API\AddUserController@add_user');
    Route::post('update_user','App\Http\Controllers\API\AddUserController@update_user');
    Route::get('index_user','App\Http\Controllers\API\AddUserController@index_user');
    Route::get('delete_user/{id}','App\Http\Controllers\API\AddUserController@delete_user');
    Route::get('search_user/{name}',[AddUserController::class,'searchuser']);
<<<<<<< HEAD
 
  

    // HolidayController
    Route::post('add_holiday','App\Http\Controllers\API\HolidayController@add_holiday');
    Route::post('update_holiday','App\Http\Controllers\API\HolidayController@update_holiday');
    Route::get('index_holiday','App\Http\Controllers\API\HolidayController@index_holiday');
    Route::get('delete_holiday/{id}','App\Http\Controllers\API\HolidayController@delete_holiday');
    Route::get('search_holiday/{name}',[HolidayController::class,'searchholiday']);

    //DepartmentController
    Route::post('add_department','App\Http\Controllers\API\DepartmentController@add_department');
    Route::post('update_department','App\Http\Controllers\API\DepartmentController@update_department');
    Route::get('index_department','App\Http\Controllers\API\DepartmentController@index_department');
    Route::get('delete_department/{id}','App\Http\Controllers\API\DepartmentController@delete_department');
    Route::get('search_department/{name}',[DepartmentController::class,'searchdepartment']);
=======

    //Announcement 
    Route::post('add_announcement','App\Http\Controllers\API\CompanyAnnouncementController@add_announcement');
>>>>>>> 3e0c595e496f7e81c636ef66f688a0007738d35d
});

Route::post('company_register', 'App\Http\Controllers\API\CompanyAdminsController@store');
Route::post('company_login', 'App\Http\Controllers\API\CompanyAdminsController@company_login');
// Route::post('company_dashboard', 'App\Http\Controllers\API\CompanyAdminsController@company_dashboard');
Route::get('/verify/email-auth/{email}', [CompanyAdminsController::class,'sendVerificationEmail'])->name('verify_email.auth');
Route::post('company_login', 'App\Http\Controllers\API\CompanyAdminsController@company_login');

<<<<<<< HEAD
// priti
Route::post('add_user',[AddUserController::class,'add_user']);

// pagination

=======
>>>>>>> 3e0c595e496f7e81c636ef66f688a0007738d35d
